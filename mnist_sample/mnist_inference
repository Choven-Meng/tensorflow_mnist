'''
文件一：定义前向传播的过程以及神经网络中的参数
'''
import tensorflow as tf

#定义神经网络的参数
INPUT_NODE = 784
LAYER1_NODE = 500
OUTPUT_NDOE = 10

def get_weight_variable(shape,regularizer):
    weights = tf.get_variable("weights",shape,
                              initializer=tf.truncated_normal_initializer(stddev=0.1))
    if regularizer != None:
        #将一个张量加入自定义的集合
        tf.add_to_collection('losses',regularizer(weights))
    return weights

#神经网络的前向传播过程
def inference(input_tensor,regularizer):
    #声明第一层神经网络的变量并完成前向传播过程
    with tf.variable_scope('layer1'):
        weights = get_weight_variable([INPUT_NODE,LAYER1_NODE],regularizer)
        biases = tf.get_variable("biases",[LAYER1_NODE],initializer=tf.constant_initializer(0.0))
        layer1 = tf.nn.relu(tf.matmul(input_tensor,weights)+biases)
    #第二层tf.nn.relu
    with tf.variable_scope("layer2"):
        weights = get_weight_variable([LAYER1_NODE,OUTPUT_NDOE],regularizer)
        biases = tf.get_variable("biases",[OUTPUT_NDOE],initializer=tf.constant_initializer(0.0))
        layer2 = tf.matmul(layer1,weights)+biases
    #返回前向传播结果
    return layer2

